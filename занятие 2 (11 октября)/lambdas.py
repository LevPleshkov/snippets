list_of_integers = [12, 54, 34, 98, 23]

# метод `sort()` позволяет отсортировать список,
# при этом изменяется список.  по умолчанию сортировка происходит по возрастанию.
list_of_integers.sort()


string = "Разобъем эту строку на слова и отсортируем разными Способами"

# метод `split()` позволяет разбить строку на подстроки с разделителем,
# по умолчанию строка разделяется через пробел ' '.  функция возвращает  
# список строк.
list_of_substrings = string.split(sep=' ')

# встроенная функция `sorted()` позволяет отсортировать любую итерируемую
# последовательность, не изменяя ее.  функция возвращает отсортированную 
# полсдеовательность в виде ссылки на новый объект.
substrings_sorted = sorted(list_of_substrings)

# как и метод `sotr()`, функция `sorted()` принимает в качестве именованного
# аргумента функцию-предикату, которая помогает осуществить сортировку.
# в этом случае, список сортируется не в порядке возрастания значений символов 
# (заглавные буквы следуют раньше строчных), как в предыдущем примере,
# а в алфавитном порядке.  метод `lower()` преобразует каждую строку из списка
# к срочным буквам.  `()` не нужны, потому что `lower()` здесь не вызвается,
# а лишь передается в качестве аргумента другой функции - `sorted()`.
substrings_sorted = sorted(list_of_substrings, key=str.lower)


# словарь, в котором ключ - название города, 
# значение - его приблизительное население в млн.
cities = {
    "Пермь": 1,
    "Казань": 1.2,
    "Омск": 1.1,
    "Томск": 0.6
}

# создадим лямбда-выражение, с помощью которого сможем отсортировать города
# не по названию (как было бы по умолчанию), а по населению.  при итерации
# по словарю, возвращается только ключ, а не пара 'ключ-значение'.
predicate = lambda key: cities[key]

# передаем предикату функции сортировки.
cities_sorted = sorted(cities, key=predicate)

# а можно создать лямбда-выражение прямо в том месте, где оно и потребуется, 
# если больше нигде его использовать не нужно.  теперь города будут отсортированы
# по убыванию населения.
cities_sorted = sorted(cities, key=lambda key: -cities[key])


# # словарь, в котором ключ - название города, 
# значение - список с значениями его населения
# с 1897 по 1959 гг. (из Википедии).
cities = {
    "Пермь": [45, 121, 344, 447],
    "Казань": [130, 179, 406, 667],
    "Омск": [37, 162, 289, 581],
    "Томск": [52, 92, 145, 249]
}

# сортируем города по возрастанию населения в 1959 г. - последние 
# элементы списков с населением.
cities_sorted = sorted(cities, key=lambda key: cities[key][3])
