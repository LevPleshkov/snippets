# импорт класса `QObect`, базового для всех элементов графического
# интефейса, метода для создания сигналов и декоратора для объявления
# слотов. 
from PyQt5.QtCore import QObject, pyqtSignal, pyqtSlot


# класс для демонстрации создания нестандартных сигналов и слотов.
class Widget(QObject):
    # новые сигналы могут быть созданы только в классах,
    # прямо или косвенно наследуемых от `QObject`.  их нельзя
    # добавлять динамически.  после создания, они становятся
    # доступными в Qt Designer. 
     
    # 1. сигнал, который не принимает аргументов для передачи слоту.
    signal = pyqtSignal()

    # 2. сигнал, который принимает два аргумента типа `int` и имя.
    # если не указать имя, будет использовано имя сигнала, в данном
    # случае - 'range_changed'.
    range_changed = pyqtSignal(int, int, name='rangeChanged')

    # 3. сигнал, который может принимать один, либо два `int`.
    # такой синтаксис позволяет создавать 'перегруженные' версии
    # сигнала с одним именем.
    value_changed = pyqtSignal([int], [int, int])

    # метод, с помощью которого можно протестировать механизм
    # сигналов-слотов. 
    def connect_and_emit(self):
        # соединяем сигнал со слотом.
        self.signal.connect(self.handle_signal)
        # явным образом вызвать сигнал можно с помощью метода `emit()`.
        self.signal.emit()

    # декоратор в PyQt5 является обязательным только тогда, когда
    # необходимо создать 'перегруженные' слоты для сигналов с разными
    # вариантами аргументов, как в пункте 3.  тогда декоратор должен
    # принимать соответствующий вариант аргументов.
    @pyqtSlot()
    def handle_signal(self):
        print('recieved signal')


# тестируем.
widget = Widget()
widget.connect_and_emit()
